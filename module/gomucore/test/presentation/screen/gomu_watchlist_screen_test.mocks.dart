// Mocks generated by Mockito 5.2.0 from annotations
// in gomucore/test/presentation/screen/gomu_watchlist_screen_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i5;
import 'dart:ui' as _i8;

import 'package:bloc/bloc.dart' as _i6;
import 'package:gomucore/gomucore.dart' as _i7;
import 'package:gomumovie/gomumovie.dart' as _i4;
import 'package:gomutv/domain/usecase/get_gomu_tv_watchlist_case.dart' as _i2;
import 'package:gomutv/presentation/bloc/gomu_tv_watchlist_bloc/gomu_tv_watchlist_bloc.dart'
    as _i3;
import 'package:mockito/mockito.dart' as _i1;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeGetGomuflixTvWatchlistCase_0 extends _i1.Fake
    implements _i2.GetGomuflixTvWatchlistCase {}

class _FakeGetGomuflixTvWatchlistStatusCase_1 extends _i1.Fake
    implements _i2.GetGomuflixTvWatchlistStatusCase {}

class _FakeSaveGomuflixTvWatchlistCase_2 extends _i1.Fake
    implements _i2.SaveGomuflixTvWatchlistCase {}

class _FakeRemoveGomuflixTvWatchlistCase_3 extends _i1.Fake
    implements _i2.RemoveGomuflixTvWatchlistCase {}

class _FakeGomuTvWatchlistState_4 extends _i1.Fake
    implements _i3.GomuTvWatchlistState {}

class _FakeGetGomuflixMovieListCase_5 extends _i1.Fake
    implements _i4.GetGomuflixMovieListCase {}

class _FakeGetGomuflixMovieWatchlistCase_6 extends _i1.Fake
    implements _i4.GetGomuflixMovieWatchlistCase {}

/// A class which mocks [GomuTvWatchlistBloc].
///
/// See the documentation for Mockito's code generation for more information.
class MockGomuTvWatchlistBloc extends _i1.Mock
    implements _i3.GomuTvWatchlistBloc {
  MockGomuTvWatchlistBloc() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i2.GetGomuflixTvWatchlistCase get getGomuTvWatchlistCase =>
      (super.noSuchMethod(Invocation.getter(#getGomuTvWatchlistCase),
              returnValue: _FakeGetGomuflixTvWatchlistCase_0())
          as _i2.GetGomuflixTvWatchlistCase);
  @override
  _i2.GetGomuflixTvWatchlistStatusCase get getGomuTvWatchlistStatusCase =>
      (super.noSuchMethod(Invocation.getter(#getGomuTvWatchlistStatusCase),
              returnValue: _FakeGetGomuflixTvWatchlistStatusCase_1())
          as _i2.GetGomuflixTvWatchlistStatusCase);
  @override
  _i2.SaveGomuflixTvWatchlistCase get saveGomuTvWatchlistCase =>
      (super.noSuchMethod(Invocation.getter(#saveGomuTvWatchlistCase),
              returnValue: _FakeSaveGomuflixTvWatchlistCase_2())
          as _i2.SaveGomuflixTvWatchlistCase);
  @override
  _i2.RemoveGomuflixTvWatchlistCase get removeGomuTvWatchlistCase =>
      (super.noSuchMethod(Invocation.getter(#removeGomuTvWatchlistCase),
              returnValue: _FakeRemoveGomuflixTvWatchlistCase_3())
          as _i2.RemoveGomuflixTvWatchlistCase);
  @override
  _i3.GomuTvWatchlistState get state => (super.noSuchMethod(
      Invocation.getter(#state),
      returnValue: _FakeGomuTvWatchlistState_4()) as _i3.GomuTvWatchlistState);
  @override
  _i5.Stream<_i3.GomuTvWatchlistState> get stream =>
      (super.noSuchMethod(Invocation.getter(#stream),
              returnValue: Stream<_i3.GomuTvWatchlistState>.empty())
          as _i5.Stream<_i3.GomuTvWatchlistState>);
  @override
  bool get isClosed =>
      (super.noSuchMethod(Invocation.getter(#isClosed), returnValue: false)
          as bool);
  @override
  void add(_i3.GomuTvWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#add, [event]),
          returnValueForMissingStub: null);
  @override
  void onEvent(_i3.GomuTvWatchlistEvent? event) =>
      super.noSuchMethod(Invocation.method(#onEvent, [event]),
          returnValueForMissingStub: null);
  @override
  void emit(_i3.GomuTvWatchlistState? state) =>
      super.noSuchMethod(Invocation.method(#emit, [state]),
          returnValueForMissingStub: null);
  @override
  void on<E extends _i3.GomuTvWatchlistEvent>(
          _i6.EventHandler<E, _i3.GomuTvWatchlistState>? handler,
          {_i6.EventTransformer<E>? transformer}) =>
      super.noSuchMethod(
          Invocation.method(#on, [handler], {#transformer: transformer}),
          returnValueForMissingStub: null);
  @override
  void onTransition(
          _i6.Transition<_i3.GomuTvWatchlistEvent, _i3.GomuTvWatchlistState>?
              transition) =>
      super.noSuchMethod(Invocation.method(#onTransition, [transition]),
          returnValueForMissingStub: null);
  @override
  _i5.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void onChange(_i6.Change<_i3.GomuTvWatchlistState>? change) =>
      super.noSuchMethod(Invocation.method(#onChange, [change]),
          returnValueForMissingStub: null);
  @override
  void addError(Object? error, [StackTrace? stackTrace]) =>
      super.noSuchMethod(Invocation.method(#addError, [error, stackTrace]),
          returnValueForMissingStub: null);
  @override
  void onError(Object? error, StackTrace? stackTrace) =>
      super.noSuchMethod(Invocation.method(#onError, [error, stackTrace]),
          returnValueForMissingStub: null);
}

/// A class which mocks [GomuflixMovieListNotifier].
///
/// See the documentation for Mockito's code generation for more information.
class MockGomuflixMovieListNotifier extends _i1.Mock
    implements _i4.GomuflixMovieListNotifier {
  MockGomuflixMovieListNotifier() {
    _i1.throwOnMissingStub(this);
  }

  @override
  _i4.GetGomuflixMovieListCase get getNowPlayingMovies =>
      (super.noSuchMethod(Invocation.getter(#getNowPlayingMovies),
              returnValue: _FakeGetGomuflixMovieListCase_5())
          as _i4.GetGomuflixMovieListCase);
  @override
  set getNowPlayingMovies(_i4.GetGomuflixMovieListCase? _getNowPlayingMovies) =>
      super.noSuchMethod(
          Invocation.setter(#getNowPlayingMovies, _getNowPlayingMovies),
          returnValueForMissingStub: null);
  @override
  _i4.GetGomuflixMovieListCase get getPopularMovies =>
      (super.noSuchMethod(Invocation.getter(#getPopularMovies),
              returnValue: _FakeGetGomuflixMovieListCase_5())
          as _i4.GetGomuflixMovieListCase);
  @override
  set getPopularMovies(_i4.GetGomuflixMovieListCase? _getPopularMovies) => super
      .noSuchMethod(Invocation.setter(#getPopularMovies, _getPopularMovies),
          returnValueForMissingStub: null);
  @override
  _i4.GetGomuflixMovieListCase get getTopRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#getTopRatedMovies),
              returnValue: _FakeGetGomuflixMovieListCase_5())
          as _i4.GetGomuflixMovieListCase);
  @override
  set getTopRatedMovies(_i4.GetGomuflixMovieListCase? _getTopRatedMovies) =>
      super.noSuchMethod(
          Invocation.setter(#getTopRatedMovies, _getTopRatedMovies),
          returnValueForMissingStub: null);
  @override
  _i4.GetGomuflixMovieWatchlistCase get getWatchlistMovies =>
      (super.noSuchMethod(Invocation.getter(#getWatchlistMovies),
              returnValue: _FakeGetGomuflixMovieWatchlistCase_6())
          as _i4.GetGomuflixMovieWatchlistCase);
  @override
  set getWatchlistMovies(
          _i4.GetGomuflixMovieWatchlistCase? _getWatchlistMovies) =>
      super.noSuchMethod(
          Invocation.setter(#getWatchlistMovies, _getWatchlistMovies),
          returnValueForMissingStub: null);
  @override
  List<_i4.GomuflixMovieEntity> get nowPlayingMovieVar =>
      (super.noSuchMethod(Invocation.getter(#nowPlayingMovieVar),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  set nowPlayingMovieVar(List<_i4.GomuflixMovieEntity>? _nowPlayingMovieVar) =>
      super.noSuchMethod(
          Invocation.setter(#nowPlayingMovieVar, _nowPlayingMovieVar),
          returnValueForMissingStub: null);
  @override
  List<_i4.GomuflixMovieEntity> get popularMovieVar =>
      (super.noSuchMethod(Invocation.getter(#popularMovieVar),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  set popularMovieVar(List<_i4.GomuflixMovieEntity>? _popularMovieVar) =>
      super.noSuchMethod(Invocation.setter(#popularMovieVar, _popularMovieVar),
          returnValueForMissingStub: null);
  @override
  List<_i4.GomuflixMovieEntity> get topRatedMovieVar =>
      (super.noSuchMethod(Invocation.getter(#topRatedMovieVar),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  set topRatedMovieVar(List<_i4.GomuflixMovieEntity>? _topRatedMovieVar) =>
      super.noSuchMethod(
          Invocation.setter(#topRatedMovieVar, _topRatedMovieVar),
          returnValueForMissingStub: null);
  @override
  List<_i4.GomuflixMovieEntity> get watchlistMovieVar =>
      (super.noSuchMethod(Invocation.getter(#watchlistMovieVar),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  set watchlistMovieVar(List<_i4.GomuflixMovieEntity>? _watchlistMovieVar) =>
      super.noSuchMethod(
          Invocation.setter(#watchlistMovieVar, _watchlistMovieVar),
          returnValueForMissingStub: null);
  @override
  List<_i4.GomuflixMovieEntity> get gomuMovie =>
      (super.noSuchMethod(Invocation.getter(#gomuMovie),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  set gomuMovie(List<_i4.GomuflixMovieEntity>? _gomuMovie) =>
      super.noSuchMethod(Invocation.setter(#gomuMovie, _gomuMovie),
          returnValueForMissingStub: null);
  @override
  _i7.RequestState get state => (super.noSuchMethod(Invocation.getter(#state),
      returnValue: _i7.RequestState.empty) as _i7.RequestState);
  @override
  set state(_i7.RequestState? _state) =>
      super.noSuchMethod(Invocation.setter(#state, _state),
          returnValueForMissingStub: null);
  @override
  String get messageVar =>
      (super.noSuchMethod(Invocation.getter(#messageVar), returnValue: '')
          as String);
  @override
  set messageVar(String? _messageVar) =>
      super.noSuchMethod(Invocation.setter(#messageVar, _messageVar),
          returnValueForMissingStub: null);
  @override
  List<_i4.GomuflixMovieEntity> get nowPlayingMovies =>
      (super.noSuchMethod(Invocation.getter(#nowPlayingMovies),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  List<_i4.GomuflixMovieEntity> get popularMovies =>
      (super.noSuchMethod(Invocation.getter(#popularMovies),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  List<_i4.GomuflixMovieEntity> get topRatedMovies =>
      (super.noSuchMethod(Invocation.getter(#topRatedMovies),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  List<_i4.GomuflixMovieEntity> get watchlistMovies =>
      (super.noSuchMethod(Invocation.getter(#watchlistMovies),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  List<_i4.GomuflixMovieEntity> get movie =>
      (super.noSuchMethod(Invocation.getter(#movie),
              returnValue: <_i4.GomuflixMovieEntity>[])
          as List<_i4.GomuflixMovieEntity>);
  @override
  _i7.RequestState get gomuMovieNowPlayingState =>
      (super.noSuchMethod(Invocation.getter(#gomuMovieNowPlayingState),
          returnValue: _i7.RequestState.empty) as _i7.RequestState);
  @override
  _i7.RequestState get gomuMoviePopularState =>
      (super.noSuchMethod(Invocation.getter(#gomuMoviePopularState),
          returnValue: _i7.RequestState.empty) as _i7.RequestState);
  @override
  _i7.RequestState get gomuMovieTopRatedState =>
      (super.noSuchMethod(Invocation.getter(#gomuMovieTopRatedState),
          returnValue: _i7.RequestState.empty) as _i7.RequestState);
  @override
  _i7.RequestState get gomuMovieWatchlistState =>
      (super.noSuchMethod(Invocation.getter(#gomuMovieWatchlistState),
          returnValue: _i7.RequestState.empty) as _i7.RequestState);
  @override
  String get message =>
      (super.noSuchMethod(Invocation.getter(#message), returnValue: '')
          as String);
  @override
  bool get hasListeners =>
      (super.noSuchMethod(Invocation.getter(#hasListeners), returnValue: false)
          as bool);
  @override
  _i5.Future<void> syncGomuMovieNowPlaying() =>
      (super.noSuchMethod(Invocation.method(#syncGomuMovieNowPlaying, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> syncGomuMoviePopular() =>
      (super.noSuchMethod(Invocation.method(#syncGomuMoviePopular, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> syncGomuMovieTopRated() =>
      (super.noSuchMethod(Invocation.method(#syncGomuMovieTopRated, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  _i5.Future<void> syncGomuMovieWatchlist() =>
      (super.noSuchMethod(Invocation.method(#syncGomuMovieWatchlist, []),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i5.Future<void>);
  @override
  void addListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#addListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void removeListener(_i8.VoidCallback? listener) =>
      super.noSuchMethod(Invocation.method(#removeListener, [listener]),
          returnValueForMissingStub: null);
  @override
  void dispose() => super.noSuchMethod(Invocation.method(#dispose, []),
      returnValueForMissingStub: null);
  @override
  void notifyListeners() =>
      super.noSuchMethod(Invocation.method(#notifyListeners, []),
          returnValueForMissingStub: null);
}
